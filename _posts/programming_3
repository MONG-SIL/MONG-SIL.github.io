(3) (1)의 확장
다음 명령어를 수행하는 프로그램을 작성하시오. 단 아래의 명령어에 주어지는 수식은 후위 표기 수식이고, 연산자들은 +, -, *, //, %이고, 피연산자는 정수형 상수 혹은 변수이다. 수식의 연산자 전후, 피연산자 전후에 공백이 있다(첫 번째 피연산자 전에는 공백이 없을 수도 있다).

명령어 종류 및 양식: 
명령어는 다음의 세 가지 종류가 있고, 각 명령어는 ;으로 끝난다.
(i) set 명령어
   set 명령어 양식: “set 변수 수식 ;” 
   여기서, 변수는 알파벳으로 시작하는 문자열이고, 수식은 후위 표기 수식임.
   set 명령어 수행 결과: 수식을 계산하여 그 결과값을 변수가 참조.




if (i == set):
= ['set', 'eval', 'quit']
딕셔너리
input을 리스트로 받고
0은 set 
1은 변수니까 변수 지정
2는 수식 

(ii) eval 명령어
   eval 명령어 양식: “eval 수식 ;”  
           여기서, 수식은 후위 표기 수식임.
   eval 명령어 수행 결과: 수식을 계산하여 그 결과값을 출력.
딕셔너리 
0은 eval
1은 수식 그대로 

(iii) quit 명령어
    quit 명령어 양식: “quit ;”  
    quit 명령어 수행 결과: 프로그램을 종료함.

quit

제약조건: postfix 수식 계산을 위한 스택을 사용하여야 함
힌트: 변수와 값을 저장하는 딕셔너리를 이용


명령어 수행 예		출력
eval 3 5 + ;            	8     # 후위 표기 수식 결과값 8을 출력
eval -3 5 + ;		2     # 후위 표기 수식 결과값 2를 출력
eval 3 5 8 - + * ;	error1  # error1을 출력: postfix 수식 오류 
eval 9 34 + 3 - ;	40   # 후위 표기 수식 결과값 40을 출력
eval 13 ;		13   # 후위 표기 수식 결과값 13을 출력
set a 60 20 + ;    	# 출력결과는 없고, 변수 a가 80을 참조 
set b 15 ;         	# 출력결과는 없고, 변수 b가 15를 참조
eval a b + 50 - ;	45   # 후위 표기 수식의 결과값 45를 출력
eval 2 a b - + ;		67
eval 3 c + ;		Error: c is not defined # 오류 메시지 출력 
quit ;  			# 종료


class Stack:
	def __init__(self):
		self.items = []
	def isEmpty(self):
		return len(self.items) == 0
	def push(self,x):
		self.items.append(x)
	def pop(self):
		if not self.isEmpty():
			return self.items.pop()
		else:
			return 
	def peek():
		if self.isEmpty():
			print("Stack is empty")
		else:
			return self.items[-1]
	def size():
		return len(self.items)
	def clear():
		self.items = []
		return self.items

def task(string):
	s = Stack()
	openP = '({['
	closeP = ')}]'
	idx = 0
	
	for i in string:
		n = 0
		if i in openP:
			s.push(i)
		elif i in closeP:
			if s.isEmpty():#닫는 괄호에 대한 여는 괄호가 없는경우 error1,2,3
				if i == ')':
					st = 'error1'
					idx = string.find(i)
					print(idx, st)
					return 0
				elif i == '}':
					st = 'error2'
					idx = string.find(i)
					print(idx, st)
					return 0
				elif i == ']':
					st = 'error3'
					idx = string.find(i)
					print(idx, st)
					return 0
			else: # 스택이 비어있지 않다면
				j = s.pop() # 맨 뒤에꺼 비교
				if (i == ')' and j != '(') or (i == '}' and j != '{') or (i == ']' and j != '['):# 짝이 안맞으면 
					if i == ')':
						st = 'error1'
						idx = string.find(i)
						print(idx, st)
						return 0
					elif i == '}':
						st = 'error2'
						idx = string.find(i)
						print(idx, st)
						return 0
					elif i == ']':
						st = 'error3'
						idx = string.find(i)
						print(idx, st)
						return 0
		n+=1
	if s.isEmpty():
		return 1
	else:
		if s.items[0] == '(':
			st = 'error4'
			idx = string.rfind(s.items[0])
			print(idx, st)
			return 0
		elif s.items[0] == '{':
			st = 'error5'
			idx = string.rfind(s.items[0])
			print(idx, st)
			return 0
		elif s.items[0] == '[':
			st = 'error6'
			idx = string.rfind(s.items[0])
			print(idx, st)
			return 0
	

path = input()
a1 = task(path)

### 인덱스를 똑바로 찾아야 함





		if (s.isEmpty() == False) and (i == ' '):
			x = s.items[0]
			if (x == '('):
				st = 'error4'
				idx = string[0:n+1].rfind(s.items[0])
				print(idx, st)
				return 0
			elif (x == '{'):
				st = 'error5'
				idx = string[0:n+1].rfind(s.items[0])
				print(idx, st)
				return 0
			elif (x == '['):
				st = 'error6'
				print(n, st)
				return 0















            -----------------------------



            
	
	n1 = 0 #닫는 소괄호 개수
	n2 = 0 # 닫는 중괄호 개수
	n3 = 0 # 닫는 대괄호 개수
	n4 = 0 # 
	n5 = 0
	n6 = 0
	for m in string:
		if (m == ')'):
			n1 += 1
		elif (m == '}'):
			n2 += 1
		elif (m == ']'):
			n3 += 1


	if s.isEmpty(): # 스택이 비어 있으면 성공
		print(1)
		return 1
	else: #스택이 비어있지 않을 경우 여는괄호 ({[ 가 스택의 안에 존재한다.
		if s.items[0] == '(': # 스택에 제일 먼저 들어온거 = 제일 먼저 오류 뜬거
			st = 'error4'
			num = 0
			for k in string:
				if (k == '('):
					n4 += 1
				if (n1 < n4):
					print(num, st)
					return 0
				num += 1
		elif s.items[0] == '{':
			st = 'error5'
			num = 0
			for k in string:
				if (k == '{'):
					n5 += 1
				if (n2 < n5):
					print(num, st)
					return 0
				num += 1	
		elif s.items[0] == '[':
			st = 'error6'
			num = 0
			for k in string:
				if (k == '['):
					n6 += 1
				if (n3 < n6):
					print(num, st)
					return 0
				num += 1
			return 0












         ------------
         1 2 3 5 qjs
         


1234 67891011 12


         12

         6

         4

         8

         7

         13

         1 2 3

         10

         9

         11



기본

		 def task(string):
	s = Stack()
	lst = ['+','-','*','//','%']
	for i in string:
		if i in lst:
			if (len(s.items) < 2):
				print('error')## 6번 8번 그럼 뭐가 문제고
				return False
			val2 = s.pop()
			val1 = s.pop()
			if (i == '+'):
				s.push(val1 + val2)
			elif (i == '-'):
				s.push(val1 - val2)
			elif (i == '*'):
				s.push(val1 * val2)
			elif (i == '//'):
				s.push(val1 // val2)
			elif (i == '%'):
				s.push(val1 % val2)
		else:
			if (i == ';'):
				if (len(s.items) != 1):
					print('error')
					return False
				j = s.pop()
				print(j)
				return True
			s.push(int(i))

















			class Stack:
	def __init__(self):
		self.items = []
	def isEmpty(self):
		return len(self.items) == 0
	def push(self,x):
		self.items.append(x)
	def pop(self):
		if not self.isEmpty():
			return self.items.pop()
	def peek():
		if not self.isEmpty():
			return self.items[-1]
	def size():
		return len(self.items)
	def clear():
		self.items = []
		return self.items
	
	
	
def task(string):
	s = Stack()
	t_dict = {}
	lst = ['+','-','*','//','%']
	if (string[0] == 'set'):
		for i in string[2:]: #지정할 변수 뒤의 후위계산
			if i in lst:
				if (len(s.items) < 2):
					print('error1')
					return False
				val2 = s.pop()
				val1 = s.pop()
				if (i == '+'):
					s.push(val1 + val2)
				elif (i == '-'):
					s.push(val1 - val2)
				elif (i == '*'):
					s.push(val1 * val2)
				elif (i == '//'):
					s.push(val1 // val2)
				elif (i == '%'):
					s.push(val1 % val2)
			else:
				if (i == ';'):
					if (len(s.items) > 1):
						print('error')
					j = s.pop()
					t_dict[string[1]] = j # 알파벳 변수의 value값을 j로 지정해 저장
					return True
				s.push(int(i))
	elif (string[0] == 'eval'):
		for i in string[1:]:
			if i in lst:
				if (len(s.items) < 2):
					print('error1')
					return False
				val2 = s.pop()
				if (val2.isalpha()):# 알파벳 변수면
					val2 = t_dict[val2] # 벨류값(숫자)로 바꿔준다.
				val1 = s.pop()
				if (val1.isalpha()):# 알파벳 변수면
					val1 = t_dict[val1] # 벨류값(숫자)로 바꿔준다.
				if (i == '+'):
					s.push(val1 + val2)
				elif (i == '-'):
					s.push(val1 - val2)
				elif (i == '*'):
					s.push(val1 * val2)
				elif (i == '//'):
					s.push(val1 // val2)
				elif (i == '%'):
					s.push(val1 % val2)
			else:
				if (i == ';'):
					if (len(s.items) > 1):
						print('error2')
						return False
					j = s.pop()
					print(j)
					return True
				s.push(int(i))
	elif (string[0] == 'quit'):
		if (string[1] == ';'):
			return False
	

string = input().split()
a1 = task(string)




class Stack:
	def __init__(self):
		self.items = []
	def isEmpty(self):
		return len(self.items) == 0
	def push(self,x):
		self.items.append(x)
	def pop(self):
		if not self.isEmpty():
			return self.items.pop()
	def peek():
		if not self.isEmpty():
			return self.items[-1]
	def size():
		return len(self.items)
	def clear():
		self.items = []
		return self.items
	

def task(string):
	s = Stack()
	t_dict = {}
	lst = ['+','-','*','//','%']

	if (string[0] == 'set'):
		for i in string[2:]: #지정할 변수 뒤의 후위계산
			if i in lst:
				if (len(s.items) < 2):
					print('error1')
					return False
				val2 = s.pop()
				val1 = s.pop()
				if (i == '+'):
					s.push(val1 + val2)
				elif (i == '-'):
					s.push(val1 - val2)
				elif (i == '*'):
					s.push(val1 * val2)
				elif (i == '//'):
					s.push(val1 // val2)
				elif (i == '%'):
					s.push(val1 % val2)
			else:
				if (i == ';'):
					if (len(s.items) > 1):
						print('error')
					j = s.pop()
					t_dict[string[1]] = j # 알파벳 변수의 value값을 j로 지정해 저장
				s.push(i)
	elif (string[0] == 'eval'):
		for i in string[1:]:
			if i in lst:
				if (len(s.items) < 2):
					print('error1')
					return False
				val2 = s.pop()
				if (val2.isalpha()):# 알파벳 변수면
					val2 = t_dict[val2] # 벨류값(숫자)로 바꿔준다.
				val1 = s.pop()
				if (val1.isalpha()):# 알파벳 변수면
					val1 = t_dict[val1] # 벨류값(숫자)로 바꿔준다.
				if (i == '+'):
					s.push(val1 + val2)
				elif (i == '-'):
					s.push(val1 - val2)
				elif (i == '*'):
					s.push(val1 * val2)
				elif (i == '//'):
					s.push(val1 // val2)
				elif (i == '%'):
					s.push(val1 % val2)
			#elif (i.isalpha()):
			#	s.push(t_dict[i])
			else:
				if (i == ';'):
					if (len(s.items) > 1):
						print('error2')
						return False
					j = s.pop()
					if (j.isalpha()):
						j = t_dict[j]
					print(j, end = '')
				s.push(i)
	elif (string[0] == 'quit'):
		return False
	
	
	
	
while(1):	
	string = input().split()
	if (string[0] == 'quit'):
		break
	a1 = task(string)